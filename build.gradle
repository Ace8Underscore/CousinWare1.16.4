buildscript {
    repositories {
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'impactdevelopment-repo'
            url = 'https://impactdevelopment.github.io/maven/'
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'com.github.oshi:oshi-core:5.3.4'
        classpath "org.slf4j:slf4j-simple:1.6.1"


    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

//apply plugin: 'com.github.oshi'

version project.modVersion
group project.modGroup // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'cousinware'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {

    sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
}

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
//    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=cousinware.mixins.json"
            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                cousinware {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=cousinware.mixins.json"
            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                cousinware {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=cousinware.mixins.json"
            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args 'CousinWare', 'cousinware', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                cousinware {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        name = 'impactdevelopment-repo'
        url = 'https://impactdevelopment.github.io/maven/'
    }
    maven {
        name = 'swt-repo'
        url = "http://maven-eclipse.github.io/maven"
    }
    maven {
        name = "jitpack.io"
        url = "https://jitpack.io"
    }
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.1-SNAPSHOT:processor'
    compile group: 'net.jodah', name: 'typetools', version: '0.5.0'
    compile group: "com.googlecode.json-simple", name: "json-simple", version: "1.1.1"
    compile group: 'com.github.oshi', name: 'oshi-core', version: '5.3.4'
    compile group: "org.slf4j", name : "slf4j-simple", version: "1.6.1"
    compile "com.github.ZeroMemes:Alpine:1.5"
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.58'




}

/*processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
} */

shadowJar {
    dependencies {
        include(dependency('org.spongepowered:mixin'))
        include(dependency('net.jodah:typetools'))
        include(dependency('com.googlecode.json-simple:json-simple:1.1.1'))
        include(dependency('net.minecraftforge:forge:1.16.5-36.0.58'))
        include(dependency('com.github.ZeroMemes:Alpine'))

    }
    exclude 'dummyThing'
    exclude 'LICENSE.txt'
    classifier = 'release'
}

mixin {
    //defaultObfuscationEnv searge
    add sourceSets.main, 'cousinware.refmap.json'
}

reobf {
    shadowJar {
       // mappingType = 'SEARGE'
        classpath = sourceSets.main.compileClasspath
    }
}

build.dependsOn(shadowJar)

jar {
    manifest {
        attributes([

                "Specification-Title": "cousinware",
                "Specification-Vendor": "cousinware",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "cousinware.mixins.json"

        ])
    }
}
